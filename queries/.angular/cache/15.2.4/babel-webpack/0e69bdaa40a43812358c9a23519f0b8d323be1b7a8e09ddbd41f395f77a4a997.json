{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class LeaderboardService {\n  constructor(http) {\n    this.http = http;\n  }\n  getPlayers() {\n    return this.http.get('/api/listings');\n  }\n  getPlayerInfo(id) {\n    return this.http.get(`/api/listings/${id}`);\n  }\n  getLeaderboardInfo(pID, gID) {\n    return this.http.get(`/api/listings/${pID}/${gID}`);\n  }\n  getLeaderboardInfo(pID, gID) {\n    return this.http.get(`/api/listings/${pID}/${gID}`);\n  }\n  getTopPerGame(gameID) {\n    return this.http.get(`/api/q3/${gameID}`);\n  }\n  getGamesByStudio() {\n    return this.http.get('/api/q4');\n  }\n  getTopPlayer() {\n    return this.http.get('/api/q5');\n  }\n  getWinLoss() {\n    return this.http.get('/api/q7');\n  }\n  getBestGame() {\n    return this.http.get('/api/q8');\n  }\n  createPlayer(firstName, lastName, gamertag, platform, age, regionID) {\n    return this.http.post('/api/listings', {\n      firstName,\n      lastName,\n      gamertag,\n      platform,\n      age,\n      regionID\n    }, httpOptions);\n  }\n  createLeaderboard(id, gameID, timePlayed, killDeathRatio, winLossRatio, playerRank) {\n    return this.http.post(`/api/leaderboard/${id}`, {\n      gameID,\n      timePlayed,\n      killDeathRatio,\n      winLossRatio,\n      playerRank\n    }, httpOptions);\n  }\n  editPlayer(id, firstName, lastName, gamertag, platform, age, regionID) {\n    return this.http.post(`/api/listings/${id}`, {\n      firstName,\n      lastName,\n      gamertag,\n      platform,\n      age,\n      regionID\n    });\n  }\n  editLeaderboard(id, gameID, timePlayed, killDeathRatio, winLossRatio, playerRank) {\n    return this.http.post(`/api/listings/update/${id}`, {\n      gameID,\n      timePlayed,\n      killDeathRatio,\n      winLossRatio,\n      playerRank\n    });\n  }\n  deletePlayer(id) {\n    return this.http.delete(`/api/listings/${id}`);\n  }\n  deleteLeaderboard(pID, gID) {\n    return this.http.delete(`/api/leaderboard/${pID}/${gID}`);\n  }\n}\nLeaderboardService.ɵfac = function LeaderboardService_Factory(t) {\n  return new (t || LeaderboardService)(i0.ɵɵinject(i1.HttpClient));\n};\nLeaderboardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LeaderboardService,\n  factory: LeaderboardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAG9D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IACvB,cAAc,EAAE;GACjB;CACF;AAKD,OAAM,MAAOG,kBAAkB;EAE7BC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACV;EAEJC,UAAU;IACR,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAW,eAAe,CAAC;EACjD;EAEAC,aAAa,CAACC,EAAiB;IAC7B,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAU,iBAAiBE,EAAE,EAAE,CAAC;EACtD;EAEAC,kBAAkB,CAACC,GAAkB,EAAEC,GAAkB;IACvD,OAAO,IAAI,CAACP,IAAI,CAACE,GAAG,CAAkB,iBAAiBI,GAAG,IAAIC,GAAG,EAAE,CAAC;EACtE;EAEAF,kBAAkB,CAACC,GAAkB,EAAEC,GAAkB;IACvD,OAAO,IAAI,CAACP,IAAI,CAACE,GAAG,CAAkB,iBAAiBI,GAAG,IAAIC,GAAG,EAAE,CAAC;EACtE;EAEAC,aAAa,CAACC,MAAc;IAC1B,OAAO,IAAI,CAACT,IAAI,CAACE,GAAG,CAAe,WAAWO,MAAM,EAAE,CAAC;EACzD;EAEAC,gBAAgB;IACd,OAAO,IAAI,CAACV,IAAI,CAACE,GAAG,CAAkB,SAAS,CAAC;EAClD;EAEAS,YAAY;IACV,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAAoB,SAAS,CAAC;EACpD;EAEAU,UAAU;IACR,OAAO,IAAI,CAACZ,IAAI,CAACE,GAAG,CAAgB,SAAS,CAAC;EAChD;EAEAW,WAAW;IACT,OAAO,IAAI,CAACb,IAAI,CAACE,GAAG,CAAa,SAAS,CAAC;EAC7C;EAEAY,YAAY,CAACC,SAAiB,EAAEC,QAAgB,EAAEC,QAAgB,EAAEC,QAAgB,EAAEC,GAAW,EAAEC,QAAgB;IACjH,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CACnB,eAAe,EACf;MAAEN,SAAS;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,GAAG;MAAEC;IAAQ,CAAE,EAC1DxB,WAAW,CACZ;EACH;EAEA0B,iBAAiB,CAAClB,EAAU,EAAEK,MAAc,EAAEc,UAAkB,EAAEC,cAAsB,EAAEC,YAAoB,EAAEC,UAAkB;IAChI,OAAO,IAAI,CAAC1B,IAAI,CAACqB,IAAI,CACnB,oBAAoBjB,EAAE,EAAE,EACxB;MAAEK,MAAM;MAAEc,UAAU;MAAEC,cAAc;MAAEC,YAAY;MAAEC;IAAU,CAAE,EAChE9B,WAAW,CACZ;EACH;EAEA+B,UAAU,CAACvB,EAAU,EAAEW,SAAiB,EAAEC,QAAgB,EAAEC,QAAgB,EAAEC,QAAgB,EAAEC,GAAW,EAAEC,QAAgB;IAC3H,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CACnB,iBAAiBjB,EAAE,EAAE,EACrB;MAAEW,SAAS;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,GAAG;MAAEC;IAAQ,CAAE,CAC3D;EACH;EAEAQ,eAAe,CAACxB,EAAU,EAAEK,MAAc,EAAEc,UAAkB,EAAEC,cAAsB,EAAEC,YAAoB,EAAEC,UAAkB;IAC9H,OAAO,IAAI,CAAC1B,IAAI,CAACqB,IAAI,CACnB,wBAAwBjB,EAAE,EAAE,EAC5B;MAAEK,MAAM;MAAEc,UAAU;MAAEC,cAAc;MAAEC,YAAY;MAAEC;IAAU,CAAE,CACjE;EACH;EAEAG,YAAY,CAACzB,EAAU;IACrB,OAAO,IAAI,CAACJ,IAAI,CAAC8B,MAAM,CAAC,iBAAiB1B,EAAE,EAAE,CAAC;EAChD;EAEA2B,iBAAiB,CAACzB,GAAW,EAAEC,GAAW;IACxC,OAAO,IAAI,CAACP,IAAI,CAAC8B,MAAM,CAAC,oBAAoBxB,GAAG,IAAIC,GAAG,EAAE,CAAC;EAC3D;;AA9EWT,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAkC,SAAlBlC,kBAAkB;EAAAmC,YAFjB;AAAM","names":["HttpHeaders","httpOptions","headers","LeaderboardService","constructor","http","getPlayers","get","getPlayerInfo","id","getLeaderboardInfo","pID","gID","getTopPerGame","gameID","getGamesByStudio","getTopPlayer","getWinLoss","getBestGame","createPlayer","firstName","lastName","gamertag","platform","age","regionID","post","createLeaderboard","timePlayed","killDeathRatio","winLossRatio","playerRank","editPlayer","editLeaderboard","deletePlayer","delete","deleteLeaderboard","factory","providedIn"],"sourceRoot":"","sources":["/Users/robertpeterson/Desktop/DBFinal/queries/src/app/leaderboard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BestGame, BestWinLoss, GamesByStudio, Player, TopPerGame, TopPlayerByGame, PlayerR, LeaderboardInfo } from './types';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LeaderboardService {\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  getPlayers(): Observable<Player[]> {\n    return this.http.get<Player[]>('/api/listings');\n  }\n\n  getPlayerInfo(id: string | null): Observable<PlayerR> {\n    return this.http.get<PlayerR>(`/api/listings/${id}`);\n  }\n\n  getLeaderboardInfo(pID: string | null, gID: string | null): Observable<LeaderboardInfo> {\n    return this.http.get<LeaderboardInfo>(`/api/listings/${pID}/${gID}`);\n  }\n\n  getLeaderboardInfo(pID: string | null, gID: string | null): Observable<LeaderboardInfoR> {\n    return this.http.get<LeaderboardInfo>(`/api/listings/${pID}/${gID}`);\n  }\n\n  getTopPerGame(gameID: number): Observable<TopPerGame[]> {\n    return this.http.get<TopPerGame[]>(`/api/q3/${gameID}`);\n  }\n\n  getGamesByStudio(): Observable<GamesByStudio[]> {\n    return this.http.get<GamesByStudio[]>('/api/q4');\n  }\n\n  getTopPlayer(): Observable<TopPlayerByGame[]> {\n    return this.http.get<TopPlayerByGame[]>('/api/q5');\n  }\n\n  getWinLoss(): Observable<BestWinLoss[]> {\n    return this.http.get<BestWinLoss[]>('/api/q7');\n  }\n\n  getBestGame(): Observable<BestGame[]> {\n    return this.http.get<BestGame[]>('/api/q8');\n  }\n\n  createPlayer(firstName: string, lastName: string, gamertag: string, platform: string, age: number, regionID: number): Observable<Player> {\n    return this.http.post<Player>(\n      '/api/listings',\n      { firstName, lastName, gamertag, platform, age, regionID },\n      httpOptions,\n    );\n  }\n\n  createLeaderboard(id: number, gameID: number, timePlayed: number, killDeathRatio: number, winLossRatio: number, playerRank: string): Observable<LeaderboardInfo> {\n    return this.http.post<LeaderboardInfo>(\n      `/api/leaderboard/${id}`,\n      { gameID, timePlayed, killDeathRatio, winLossRatio, playerRank },\n      httpOptions,\n    );\n  }\n\n  editPlayer(id: number, firstName: string, lastName: string, gamertag: string, platform: string, age: number, regionID: number): Observable<Player> {\n    return this.http.post<Player>(\n      `/api/listings/${id}`,\n      { firstName, lastName, gamertag, platform, age, regionID },\n    );\n  }\n\n  editLeaderboard(id: number, gameID: number, timePlayed: number, killDeathRatio: number, winLossRatio: number, playerRank: string): Observable<LeaderboardInfo> {\n    return this.http.post<LeaderboardInfo>(\n      `/api/listings/update/${id}`,\n      { gameID, timePlayed, killDeathRatio, winLossRatio, playerRank },\n    );\n  }\n\n  deletePlayer(id: number): Observable<any> {\n    return this.http.delete(`/api/listings/${id}`);\n  }\n\n  deleteLeaderboard(pID: number, gID: number): Observable<any> {\n    return this.http.delete(`/api/leaderboard/${pID}/${gID}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}